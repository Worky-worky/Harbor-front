"use client"

import { useState } from "react"
import {
  ArrowDownUp,
  ArrowUpDown,
  Calendar,
  ChevronDown,
  CreditCard,
  Download,
  Filter,
  Search,
  ShoppingBag,
  Smartphone,
  Wifi,
} from "lucide-react"
import { format, subDays } from "date-fns"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

// Sample transaction data
const transactions = [
  {
    id: "t123456",
    date: subDays(new Date(), 1),
    description: "Amazon.com",
    merchant: "Amazon",
    category: "Shopping",
    type: "debit",
    amount: 79.99,
    status: "completed",
    accountNumber: "**** 4582",
    reference: "REF123456789",
    notes: "",
    icon: ShoppingBag,
  },
  {
    id: "t123457",
    date: subDays(new Date(), 2),
    description: "Salary Deposit",
    merchant: "Employer Inc.",
    category: "Income",
    type: "credit",
    amount: 2500.0,
    status: "completed",
    accountNumber: "**** 4582",
    reference: "REF987654321",
    notes: "Monthly salary",
    icon: CreditCard,
  },
  {
    id: "t123458",
    date: subDays(new Date(), 3),
    description: "Starbucks Coffee",
    merchant: "Starbucks",
    category: "Food & Drink",
    type: "debit",
    amount: 5.75,
    status: "completed",
    accountNumber: "**** 4582",
    reference: "REF567891234",
    notes: "",
    icon: CreditCard,
  },
  {
    id: "t123459",
    date: subDays(new Date(), 3),
    description: "Mobile Payment",
    merchant: "AT&T",
    category: "Bills & Utilities",
    type: "debit",
    amount: 89.99,
    status: "completed",
    accountNumber: "**** 4582",
    reference: "REF345678912",
    notes: "Monthly phone bill",
    icon: Smartphone,
  },
  {
    id: "t123460",
    date: subDays(new Date(), 4),
    description: "Netflix Subscription",
    merchant: "Netflix",
    category: "Entertainment",
    type: "debit",
    amount: 14.99,
    status: "completed",
    accountNumber: "**** 4582",
    reference: "REF234567891",
    notes: "Monthly subscription",
    icon: Wifi,
  },
  {
    id: "t123461",
    date: new Date(),
    description: "Transfer to Savings",
    merchant: "Internal Transfer",
    category: "Transfer",
    type: "debit",
    amount: 500.0,
    status: "pending",
    accountNumber: "**** 4582",
    reference: "REF123789456",
    notes: "Monthly savings",
    icon: ArrowDownUp,
  },
]

export default function TransactionHistory() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined)
  const [selectedTransaction, setSelectedTransaction] = useState<string | null>(null)
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [filterType, setFilterType] = useState<string>("all")

  // Filter transactions based on search, date, and type
  const filteredTransactions = transactions.filter((transaction) => {
    const matchesSearch =
      transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.merchant.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      transaction.reference.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesDate = selectedDate
      ? format(transaction.date, "yyyy-MM-dd") === format(selectedDate, "yyyy-MM-dd")
      : true

    const matchesType = filterType === "all" ? true : transaction.type === filterType

    return matchesSearch && matchesDate && matchesType
  })

  // Sort transactions by date
  const sortedTransactions = [...filteredTransactions].sort((a, b) => {
    if (sortDirection === "asc") {
      return a.date.getTime() - b.date.getTime()
    } else {
      return b.date.getTime() - a.date.getTime()
    }
  })

  const toggleSort = () => {
    setSortDirection(sortDirection === "asc" ? "desc" : "asc")
  }

  const toggleTransactionDetails = (id: string) => {
    setSelectedTransaction(selectedTransaction === id ? null : id)
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <div>
            <CardTitle className="text-2xl">Transaction History</CardTitle>
            <CardDescription>View and manage your recent transactions</CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
            <Select defaultValue="30days">
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select period" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="7days">Last 7 days</SelectItem>
                <SelectItem value="30days">Last 30 days</SelectItem>
                <SelectItem value="90days">Last 90 days</SelectItem>
                <SelectItem value="12months">Last 12 months</SelectItem>
                <SelectItem value="custom">Custom range</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="all" className="mb-6">
          <TabsList className="grid grid-cols-4 mb-4">
            <TabsTrigger value="all" onClick={() => setFilterType("all")}>
              All
            </TabsTrigger>
            <TabsTrigger value="income" onClick={() => setFilterType("credit")}>
              Income
            </TabsTrigger>
            <TabsTrigger value="expenses" onClick={() => setFilterType("debit")}>
              Expenses
            </TabsTrigger>
            <TabsTrigger value="pending" onClick={() => setFilterType("pending")}>
              Pending
            </TabsTrigger>
          </TabsList>

          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="relative flex-1">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Search transactions..."
                className="pl-8"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            <div className="flex gap-2">
              <Popover>
                <PopoverTrigger asChild>
                  <Button variant="outline" size="sm" className="h-10">
                    <Filter className="h-4 w-4 mr-2" />
                    Filter
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-80">
                  <div className="grid gap-4">
                    <div className="space-y-2">
                      <h4 className="font-medium leading-none">Filter Transactions</h4>
                      <p className="text-sm text-muted-foreground">
                        Filter transactions by category, amount, or status
                      </p>
                    </div>
                    <div className="grid gap-2">
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <Label htmlFor="min-amount">Min Amount</Label>
                          <Input id="min-amount" placeholder="0.00" />
                        </div>
                        <div>
                          <Label htmlFor="max-amount">Max Amount</Label>
                          <Input id="max-amount" placeholder="1000.00" />
                        </div>
                      </div>
                      <div>
                        <Label>Categories</Label>
                        <div className="grid grid-cols-2 gap-2 mt-2">
                          <div className="flex items-center space-x-2">
                            <Checkbox id="shopping" />
                            <Label htmlFor="shopping">Shopping</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Checkbox id="food" />
                            <Label htmlFor="food">Food & Drink</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Checkbox id="bills" />
                            <Label htmlFor="bills">Bills</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Checkbox id="entertainment" />
                            <Label htmlFor="entertainment">Entertainment</Label>
                          </div>
                        </div>
                      </div>
                    </div>
                    <Button size="sm">Apply Filters</Button>
                  </div>
                </PopoverContent>
              </Popover>

              <Popover>
                <PopoverTrigger asChild>
                  <Button variant="outline" size="sm" className="h-10">
                    <Calendar className="h-4 w-4 mr-2" />
                    {selectedDate ? format(selectedDate, "PPP") : "Pick a date"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <CalendarComponent mode="single" selected={selectedDate} onSelect={setSelectedDate} initialFocus />
                </PopoverContent>
              </Popover>

              <Button variant="ghost" size="sm" className="h-10" onClick={toggleSort}>
                <ArrowUpDown className="h-4 w-4 mr-2" />
                {sortDirection === "desc" ? "Newest first" : "Oldest first"}
              </Button>
            </div>
          </div>

          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[100px]">Date</TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Category</TableHead>
                  <TableHead className="text-right">Amount</TableHead>
                  <TableHead className="w-[100px] text-center">Status</TableHead>
                  <TableHead className="w-[50px]"></TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {sortedTransactions.length > 0 ? (
                  sortedTransactions.map((transaction) => (
                    <>
                      <TableRow
                        key={transaction.id}
                        className="cursor-pointer hover:bg-muted/50"
                        onClick={() => toggleTransactionDetails(transaction.id)}
                      >
                        <TableCell className="font-medium">{format(transaction.date, "MMM dd")}</TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <div className="mr-2 h-8 w-8 rounded-full bg-muted flex items-center justify-center">
                              <transaction.icon className="h-4 w-4" />
                            </div>
                            <div>
                              <div className="font-medium">{transaction.description}</div>
                              <div className="text-sm text-muted-foreground">{transaction.merchant}</div>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge variant="outline">{transaction.category}</Badge>
                        </TableCell>
                        <TableCell
                          className={`text-right font-medium ${transaction.type === "credit" ? "text-green-600" : ""}`}
                        >
                          {transaction.type === "credit" ? "+" : "-"}${transaction.amount.toFixed(2)}
                        </TableCell>
                        <TableCell className="text-center">
                          <Badge
                            variant={transaction.status === "completed" ? "outline" : "secondary"}
                            className={
                              transaction.status === "pending"
                                ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-100"
                                : ""
                            }
                          >
                            {transaction.status === "completed" ? "Completed" : "Pending"}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <ChevronDown
                            className={`h-4 w-4 transition-transform ${selectedTransaction === transaction.id ? "rotate-180" : ""}`}
                          />
                        </TableCell>
                      </TableRow>
                      {selectedTransaction === transaction.id && (
                        <TableRow>
                          <TableCell colSpan={6} className="bg-muted/30 p-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <h4 className="font-semibold mb-2">Transaction Details</h4>
                                <div className="grid grid-cols-2 gap-2 text-sm">
                                  <div className="text-muted-foreground">Transaction ID:</div>
                                  <div>{transaction.id}</div>
                                  <div className="text-muted-foreground">Date & Time:</div>
                                  <div>{format(transaction.date, "PPP p")}</div>
                                  <div className="text-muted-foreground">Account:</div>
                                  <div>{transaction.accountNumber}</div>
                                  <div className="text-muted-foreground">Reference:</div>
                                  <div>{transaction.reference}</div>
                                </div>
                              </div>
                              <div>
                                <h4 className="font-semibold mb-2">Additional Information</h4>
                                <div className="text-sm">
                                  <div className="text-muted-foreground mb-1">Notes:</div>
                                  <div className="mb-4">{transaction.notes || "No notes added"}</div>
                                  <div className="flex gap-2">
                                    <Button variant="outline" size="sm">
                                      Add Note
                                    </Button>
                                    <Button variant="outline" size="sm">
                                      Report Issue
                                    </Button>
                                    <DropdownMenu>
                                      <DropdownMenuTrigger asChild>
                                        <Button variant="outline" size="sm">
                                          More
                                        </Button>
                                      </DropdownMenuTrigger>
                                      <DropdownMenuContent>
                                        <DropdownMenuItem>Download Receipt</DropdownMenuItem>
                                        <DropdownMenuItem>Print Details</DropdownMenuItem>
                                        <DropdownMenuItem>Categorize Transaction</DropdownMenuItem>
                                      </DropdownMenuContent>
                                    </DropdownMenu>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </TableCell>
                        </TableRow>
                      )}
                    </>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={6} className="h-24 text-center">
                      No transactions found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </Tabs>
      </CardContent>
      <CardFooter className="flex items-center justify-between border-t p-4">
        <div className="text-sm text-muted-foreground">
          Showing {sortedTransactions.length} of {transactions.length} transactions
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" disabled={sortedTransactions.length === transactions.length}>
            Load more
          </Button>
          <Select defaultValue="10">
            <SelectTrigger className="w-[70px]">
              <SelectValue placeholder="10" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="10">10</SelectItem>
              <SelectItem value="20">20</SelectItem>
              <SelectItem value="50">50</SelectItem>
              <SelectItem value="100">100</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </CardFooter>
    </Card>
  )
}

